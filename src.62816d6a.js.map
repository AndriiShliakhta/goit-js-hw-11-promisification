{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","task1","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","task2","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","id","logSuccess","logError","warn","task3","amount","catch"],"mappings":";;;AAkBC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAjBD,MAAMA,EAAQC,GAEL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,IACPA,KAIDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGtC,SAASG,IAEpBV,EAAM,KAAMW,KAAKL,GACjBN,EAAM,KAAMW,KAAKL,GACjBN,EAAM,MAAMW,KAAKL;;ACYpB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA3BD,MAAMM,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIf,QAAQ,CAACC,EAASC,KAE3BD,EAAQa,EAASE,IAAIC,GACnBA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAI7Db,EAASc,GAAgBZ,QAAQa,MAAMD,GAS9B,SAASE,IACpBP,EAAgBH,EAAO,SAASD,KAAKL,GACrCS,EAAgBH,EAAO,OAAOD,KAAKL;;AC6BtC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAvDD,MAAMiB,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB9B,MAAAA,EAAQuB,EAA0B,IAAK,KAEtC,OAAA,IAAIrB,QAAQ,CAACC,EAASC,KACrB2B,MAAAA,EAAaL,KAAKE,SAAW,GAEnCvB,WAAW,KAEL0B,EAEF5B,EAAQ,CAAC6B,GAAGF,EAAYE,GAAIzB,KAAKP,IAEjCI,EAAO0B,EAAYE,KAEpBhC,MAIDiC,EAAa,EAAED,GAAAA,EAAIzB,KAAAA,MACvBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAYhC,SAASI,IACpBP,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMJ,GAEXL,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMJ,GAEXL,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,KAC7B1B,KAAKsB,GACLK,MAAMJ,GAEXL,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMJ;;AC3Cf,aAbA,QAAA,oBACA,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eAUA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IANA,EAEA,EAAA,YACA,EAEA,EAAA,YACA,EAAA,EAAA","file":"src.62816d6a.js","sourceRoot":"../src","sourcesContent":["// =============== Задание 1 ====================\nconst delay = ms => {\n  // Твой код\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n\nexport default function task1() {\n    // Вызовы функции для проверки\n    delay(2000).then(logger); // Resolved after 2000ms\n    delay(1000).then(logger); // Resolved after 1000ms\n    delay(1500).then(logger); // Resolved after 1500ms\n}\n\n\n","// =============== Задание 2 ====================\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n     \n    resolve(allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user, ))\n    });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n/*\n * Должно работать так\n */\nexport default function task2() {\n    toggleUserState(users, 'Mango').then(logger);\n    toggleUserState(users, 'Lux').then(logger);\n}\n","// =============== Задание 3 ====================\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n    \n    setTimeout(() => {\n\n      if (canProcess) {\n\n        resolve({id:transaction.id, time:delay});\n      } else {\n        reject(transaction.id);\n      }\n    }, delay)\n  })\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nexport default function task3() {\n    makeTransaction({ id: 70, amount: 150 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 71, amount: 230 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 72, amount: 75 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 73, amount: 100 })\n        .then(logSuccess)\n        .catch(logError);\n}","import './sass/main.scss';\nimport task1 from './js/task1';\nimport task2 from './js/task2';\nimport task3 from './js/task3';\n\n// =============== Задание 1 ====================\n// Вызовы функции для проверки\ntask1();\n\n// =============== Задание 2 ====================\ntask2();\n\n// =============== Задание 3 ====================\ntask3();\n"]}